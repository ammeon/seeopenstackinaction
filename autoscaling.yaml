heat_template_version: 2013-05-23
description: AutoScaling Demo
parameters:
  image_id:
    type: string
    description: Image used for servers
  key:
    type: string
    description: SSH key to connect to the servers
  flavor:
    type: string
    description: flavor used by the web servers
  internal_network_subnet:
    type: string
    description: subnet on which the load balancer will be located
  external_network:
    type: string
    description: UUID of a Neutron external network
resources:
resources:
  private_net:
    type: OS::Neutron::Net
    
  internal_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      cidr: { get_param: internal_network_subnet }
          
  router: 
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: external_network }

  router1_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: internal_subnet }

  asg:
    type: OS::Heat::AutoScalingGroup
    properties:
      min_size: 2
      max_size: 5
      resource:
        type: lb_server.yaml
        properties:
          flavor: {get_param: flavor}
          image: {get_param: image_id}
          key_name: {get_param: key}
          pool_id: {get_resource: pool}
          metadata: {"metering.stack": {get_param: "OS::stack_id"}}
          network: { get_resource: private_net }
          user_data: |
            #!/bin/bash -v
            service iptables stop
            echo "Hello from instance with ip: "$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4) > /var/tmp/index.html
            mkdir /var/tmp/cgi-bin
            echo '#!/usr/bin/env python
            print "Content-Type: text/html\n"
            print "<html><head><title>All of Your CPU Are Belong to Us!</title></head>"
            print "<body>"
            print "<h1>All of Your CPU Are Belong to Us!"
            print "</body></html>"

            from multiprocessing import Process,Pool,cpu_count
            import time
            def f(x):
                begin = time.time()
                while True:
                    x*x
                    # Timeout, makes process to exit
                    delta = time.time() - begin
                    if delta >= 180:
                        break

            processes = cpu_count()
            pool = Pool(processes)
            pool.map(f, range(processes))' > /var/tmp/cgi-bin/loadme
            cd /var/tmp/
            chmod +x cgi-bin/loadme
            nice -n 19 python -m CGIHTTPServer 80

  web_server_scaleup_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: asg}
      cooldown: 10
      scaling_adjustment: 1
  web_server_scaledown_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: asg}
      cooldown: 30
      scaling_adjustment: -1
  cpu_alarm_high:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-up if the average CPU > 50% for 1 minute
      meter_name: cpu_util
      statistic: avg
      period: 10
      evaluation_periods: 1
      threshold: 40
      alarm_actions:
        - {get_attr: [web_server_scaleup_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.stack': {get_param: "OS::stack_id"}}
      comparison_operator: gt
  cpu_alarm_low:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-down if the average CPU < 15% for 1 minute
      meter_name: cpu_util
      statistic: avg
      period: 10
      evaluation_periods: 1
      threshold: 15
      alarm_actions:
        - {get_attr: [web_server_scaledown_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.stack': {get_param: "OS::stack_id"}}
      comparison_operator: lt
  monitor:
    type: OS::Neutron::HealthMonitor
    properties:
      type: TCP
      delay: 5
      max_retries: 5
      timeout: 5
  pool:
    type: OS::Neutron::Pool
    properties:
      protocol: HTTP
      monitors: [{get_resource: monitor}]
      subnet: {get_resource: internal_subnet}
      lb_method: ROUND_ROBIN
      vip:
        protocol_port: 80
  lb:
    type: OS::Neutron::LoadBalancer
    properties:
      protocol_port: 80
      pool_id: {get_resource: pool}

  # assign a floating ip address to the load balancer
  # pool.
  lb_floating:
    type: "OS::Neutron::FloatingIP"
    properties:
      floating_network: {get_param: external_network}
      port_id: {get_attr: [pool, vip, port_id]}

outputs:
  floating_ip:
    description:
      This is the floating ip assigned to the LB vip.
    value: { get_attr: [lb_floating, floating_ip_address] }
  scale_up_url:
    description: >
      This URL is the webhook to scale up the autoscaling group.  You
      can invoke the scale-up operation by doing an HTTP POST to this
      URL; no body nor extra headers are needed.
    value: {get_attr: [web_server_scaleup_policy, alarm_url]}
  scale_dn_url:
    description: >
      This URL is the webhook to scale down the autoscaling group.
      You can invoke the scale-down operation by doing an HTTP POST to
      this URL; no body nor extra headers are needed.
    value: {get_attr: [web_server_scaledown_policy, alarm_url]}
  pool_ip_address:
    value: {get_attr: [pool, vip, address]}
    description: The IP address of the load balancing pool
  website_url:
    value:
      str_replace:
        template: http://host/
        params:
          host: { get_attr: [lb_floating, floating_ip_address] }
    description: >
      This URL is the "external" URL 
  ceilometer_query:
    value:
      str_replace:
        template: >
          ceilometer statistics -m cpu_util
          -q metadata.user_metadata.stack=stackval -p 600 -a avg
        params:
          stackval: { get_param: "OS::stack_id" }
    description: >
      This is a Ceilometer query for statistics on the cpu_util meter
      Samples about OS::Nova::Server instances in this stack.  The -q
      parameter selects Samples according to the subject's metadata.
      When a VM's metadata includes an item of the form metering.X=Y,
      the corresponding Ceilometer resource has a metadata item of the
      form user_metadata.X=Y and samples about resources so tagged can
      be queried with a Ceilometer query term of the form
      metadata.user_metadata.X=Y.  In this case the nested stacks give
      their VMs metadata that is passed as a nested stack parameter,
      and this stack passes a metadata of the form metering.stack=Y,
      where Y is this stack's ID.
